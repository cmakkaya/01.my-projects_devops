{
  "version": 4,
  "terraform_version": "1.3.4",
  "serial": 43,
  "lineage": "01edaa8d-5a71-3e40-56b3-a6866784dc7a",
  "outputs": {
    "website": {
      "value": "http://ec2-3-92-191-207.compute-1.amazonaws.com",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "cumhur-docker-lesson",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-0f9fc25dd2506cf6d",
            "arn": "arn:aws:ec2:us-east-1:592681249063:instance/i-047e5e63db2298efd",
            "associate_public_ip_address": true,
            "availability_zone": "us-east-1c",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-047e5e63db2298efd",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "cumhurkey",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": null,
            "primary_network_interface_id": "eni-09ca75e6309bece31",
            "private_dns": "ip-172-31-86-227.ec2.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.86.227",
            "public_dns": "ec2-3-92-191-207.compute-1.amazonaws.com",
            "public_ip": "3.92.191.207",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-02ce95cf47b4bb076",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "david-docker-sec-gr-203"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-01207d511966ff0fb",
            "tags": {
              "Name": "david-Web Server of Bookstore"
            },
            "tags_all": {
              "Name": "david-Web Server of Bookstore"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "30ac2b494229a800662b97d1c748e34b6332b7f6",
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-01fd2cd37b2f8842f"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "github_repository.myrepo",
            "github_repository_file.myfiles"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "cumhur-docker-lesson",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-east-1:592681249063:security-group/sg-01fd2cd37b2f8842f",
            "description": "Managed by Terraform",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-01fd2cd37b2f8842f",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 80,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 80
              }
            ],
            "name": "david-docker-sec-gr-203",
            "name_prefix": "",
            "owner_id": "592681249063",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "docker-sec-gr-203"
            },
            "tags_all": {
              "Name": "docker-sec-gr-203"
            },
            "timeouts": null,
            "vpc_id": "vpc-0355e06669ccb38a1"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_branch_default",
      "name": "main",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "id": "bookstore-repo",
            "repository": "bookstore-repo"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_repository",
      "name": "myrepo",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allow_auto_merge": false,
            "allow_merge_commit": true,
            "allow_rebase_merge": true,
            "allow_squash_merge": true,
            "allow_update_branch": false,
            "archive_on_destroy": null,
            "archived": false,
            "auto_init": true,
            "default_branch": "main",
            "delete_branch_on_merge": false,
            "description": "",
            "etag": "W/\"6a37f4a5dd16e6725b5386fbbf346767e4e4e1533f4fb75936dbdae2dfea33de\"",
            "full_name": "cmakkaya/bookstore-repo",
            "git_clone_url": "git://github.com/cmakkaya/bookstore-repo.git",
            "gitignore_template": null,
            "has_downloads": false,
            "has_issues": false,
            "has_projects": false,
            "has_wiki": false,
            "homepage_url": "",
            "html_url": "https://github.com/cmakkaya/bookstore-repo",
            "http_clone_url": "https://github.com/cmakkaya/bookstore-repo.git",
            "id": "bookstore-repo",
            "ignore_vulnerability_alerts_during_read": null,
            "is_template": false,
            "license_template": null,
            "merge_commit_message": "PR_TITLE",
            "merge_commit_title": "MERGE_MESSAGE",
            "name": "bookstore-repo",
            "node_id": "R_kgDOIfDOxw",
            "pages": [],
            "private": true,
            "repo_id": 569429703,
            "security_and_analysis": [],
            "squash_merge_commit_message": "COMMIT_MESSAGES",
            "squash_merge_commit_title": "COMMIT_OR_PR_TITLE",
            "ssh_clone_url": "git@github.com:cmakkaya/bookstore-repo.git",
            "svn_url": "https://github.com/cmakkaya/bookstore-repo",
            "template": [],
            "topics": [],
            "visibility": "private",
            "vulnerability_alerts": false
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "github_repository_file",
      "name": "myfiles",
      "provider": "provider[\"registry.terraform.io/integrations/github\"]",
      "instances": [
        {
          "index_key": "Dockerfile",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "cmakkaya",
            "commit_email": "110052470+cmakkaya@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "a24bae6406a41f72e73580a839c1017201cac82c",
            "content": "FROM python:alpine\nCOPY . /app\nWORKDIR /app\nRUN pip install -r requirements.txt\nEXPOSE 80\nCMD python ./bookstore-api.py\n",
            "file": "Dockerfile",
            "id": "bookstore-repo/Dockerfile",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "1f8fdbae15401a588b9ada73f83e9b8116d4b44f"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "bookstore-api.py",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "cmakkaya",
            "commit_email": "110052470+cmakkaya@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "e012f12c049a0b21382754f0d3278bbebdf5a127",
            "content": "# Import Flask modules\r\nfrom flask import Flask, jsonify, abort, request, make_response\r\nfrom flaskext.mysql import MySQL\r\n\r\n# Create an object named app \r\napp = Flask(__name__)\r\n\r\n# Configure sqlite database\r\napp.config['MYSQL_DATABASE_HOST'] = 'database'\r\napp.config['MYSQL_DATABASE_USER'] = 'clarusway'\r\napp.config['MYSQL_DATABASE_PASSWORD'] = 'Clarusway_1'\r\napp.config['MYSQL_DATABASE_DB'] = 'bookstore_db'\r\napp.config['MYSQL_DATABASE_PORT'] = 3306\r\nmysql = MySQL()\r\nmysql.init_app(app)\r\nconnection = mysql.connect()\r\nconnection.autocommit(True)\r\ncursor = connection.cursor()\r\n\r\n# Write a function named `init_bookstore_db` which initilazes the bookstore db\r\n# Create books table within sqlite db and populate with sample data\r\n# Execute the code below only once.\r\ndef init_bookstore_db():\r\n    drop_table = 'DROP TABLE IF EXISTS bookstore_db.books;'\r\n    books_table = \"\"\"\r\n    CREATE TABLE bookstore_db.books(\r\n    book_id INT NOT NULL AUTO_INCREMENT,\r\n    title VARCHAR(100) NOT NULL,\r\n    author VARCHAR(100),\r\n    is_sold BOOLEAN NOT NULL DEFAULT 0,\r\n    PRIMARY KEY (book_id)\r\n    )ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\r\n    \"\"\"\r\n    data = \"\"\"\r\n    INSERT INTO bookstore_db.books (title, author, is_sold)\r\n    VALUES\r\n        (\"Where the Crawdads Sing\", \"Delia Owens\", 1 ),\r\n        (\"The Vanishing Half: A Novel\", \"Brit Bennett\", 0),\r\n        (\"1st Case\", \"James Patterson, Chris Tebbetts\", 0);\r\n    \"\"\"\r\n    cursor.execute(drop_table)\r\n    cursor.execute(books_table)\r\n    cursor.execute(data)\r\n\r\n# Write a function named `get_all_books` which gets all books from the books table in the db,\r\n# and return result as list of dictionary\r\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\r\ndef get_all_books():\r\n    query = \"\"\"\r\n    SELECT * FROM books;\r\n    \"\"\"\r\n    cursor.execute(query)\r\n    result = cursor.fetchall()\r\n    books =[{'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])} for row in result]\r\n    return books\r\n\r\n# Write a function named `find_book` which finds book using book_id from the books table in the db,\r\n# and return result as list of dictionary\r\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\r\ndef find_book(id):\r\n    query = f\"\"\"\r\n    SELECT * FROM books WHERE book_id={id};\r\n    \"\"\"\r\n    cursor.execute(query)\r\n    row = cursor.fetchone()\r\n    book = None\r\n    if row is not None:\r\n        book = {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\r\n    return book\r\n\r\n\r\n# Write a function named `insert_book` which inserts book into the books table in the db,\r\n# and return the newly added book as dictionary\r\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\r\ndef insert_book(title, author):\r\n    insert = f\"\"\"\r\n    INSERT INTO books (title, author)\r\n    VALUES ('{title}', '{author}');\r\n    \"\"\"\r\n    cursor.execute(insert)\r\n\r\n    query = f\"\"\"\r\n    SELECT * FROM books WHERE book_id={cursor.lastrowid};\r\n    \"\"\"\r\n    cursor.execute(query)\r\n    row = cursor.fetchone()\r\n\r\n    return {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\r\n\r\n# Write a function named `change_book` which updates book into the books table in the db,\r\n# and return updated added book as dictionary\r\n# `[{'book_id': 1, 'title':'XXXX', 'author': 'XXXXXX', 'is_sold': 'Yes' or 'No'} ]`.\r\ndef change_book(book):\r\n    update = f\"\"\"\r\n    UPDATE books\r\n    SET title='{book['title']}', author = '{book['author']}', is_sold = {book['is_sold']}\r\n    WHERE book_id= {book['book_id']};\r\n    \"\"\"\r\n    cursor.execute(update)\r\n\r\n    query = f\"\"\"\r\n    SELECT * FROM books WHERE book_id={book['book_id']};\r\n    \"\"\"\r\n    cursor.execute(query)\r\n    row = cursor.fetchone()\r\n    return {'book_id':row[0], 'title':row[1], 'author':row[2], 'is_sold': bool(row[3])}\r\n\r\n# Write a function named `remove_book` which removes book from the books table in the db,\r\n# and returns True if successfully deleted or False.\r\ndef remove_book(book):\r\n    delete = f\"\"\"\r\n    DELETE FROM books\r\n    WHERE book_id= {book['book_id']};\r\n    \"\"\"\r\n    cursor.execute(delete)\r\n\r\n    query = f\"\"\"\r\n    SELECT * FROM books WHERE book_id={book['book_id']};\r\n    \"\"\"\r\n    cursor.execute(query)\r\n    row = cursor.fetchone()\r\n    return True if row is None else False\r\n\r\n\r\n# Write a function named `home` which returns 'Welcome to the Callahan's Bookstore API Service',\r\n# and assign to the static route of ('/')\r\n@app.route('/')\r\ndef home():\r\n    return \"Welcome to Callahan's Bookstore API Service\"\r\n\r\n# Write a function named `get_books` which returns all books in JSON format for `GET`,\r\n# and assign to the static route of ('/books')\r\n@app.route('/books', methods=['GET'])\r\ndef get_books():\r\n    return jsonify({'books':get_all_books()})\r\n\r\n\r\n# Write a function named `get_books` which returns the book with given book_id in JSON format for `GET`,\r\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\r\n@app.route('/books/\u003cint:book_id\u003e', methods = ['GET'])\r\ndef get_book(book_id):\r\n    book = find_book(book_id)\r\n    if book == None:\r\n        abort(404)\r\n    return jsonify({'book found': book})\r\n\r\n# Write a function named `add_book` which adds new book using `POST` methods,\r\n# and assign to the static route of ('/books')\r\n@app.route('/books', methods=['POST'])\r\ndef add_book():\r\n    if not request.json or not 'title' in request.json:\r\n        abort(400)\r\n    return jsonify({'newly added book':insert_book(request.json['title'], request.json.get('author', ''))}), 201\r\n\r\n# Write a function named `update_book` which updates an existing book using `PUT` method,\r\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\r\n@app.route('/books/\u003cint:book_id\u003e', methods=['PUT'])\r\ndef update_book(book_id):\r\n    book = find_book(book_id)\r\n    if book == None:\r\n        abort(404)\r\n    if not request.json:\r\n        abort(400)\r\n    book['title'] = request.json.get('title', book['title'])\r\n    book['author'] = request.json.get('author', book['author'])\r\n    book['is_sold'] = int(request.json.get('is_sold', int(book['is_sold'])))\r\n    return jsonify({'updated book': change_book(book)})\r\n\r\n# Write a function named `delete_book` which updates an existing book using `DELETE` method,\r\n# and assign to the static route of ('/books/\u003cint:book_id\u003e')\r\n@app.route('/books/\u003cint:book_id\u003e', methods=['DELETE'])\r\ndef delete_book(book_id):\r\n    book = find_book(book_id)\r\n    if book == None:\r\n        abort(404)\r\n    return jsonify({'result':remove_book(book)})\r\n\r\n# Write a function named `not_found` for handling 404 errors which returns 'Not found' in JSON format.\r\n@app.errorhandler(404)\r\ndef not_found(error):\r\n    return make_response(jsonify({'error': 'Not found'}), 404)\r\n\r\n# Write a function named `bad_request` for handling 400 errors which returns 'Bad Request' in JSON format.\r\n@app.errorhandler(400)\r\ndef bad_request(error):\r\n    return make_response(jsonify({'error': 'Bad request'}), 400)\r\n\r\n\r\n# Add a statement to run the Flask application which can be reached from any host on port 80.\r\nif __name__== '__main__':\r\n    init_bookstore_db()\r\n    app.run(host='0.0.0.0', port=80)",
            "file": "bookstore-api.py",
            "id": "bookstore-repo/bookstore-api.py",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "84032102565bc101da8e0cb771bc25892bb5f0a0"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "docker-compose.yml",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "cmakkaya",
            "commit_email": "110052470+cmakkaya@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "d509002bd411850c863ab565b8c5401962ba3134",
            "content": "version: \"3.7\"\n\nservices:\n  database:\n    image: mysql:5.7\n    container_name: database\n    environment: \n      MYSQL_ROOT_PASSWORD: 123456\n      MYSQL_DATABASE: bookstore_db\n      MYSQL_USER: clarusway \n      MYSQL_PASSWORD: Clarusway_1\n    networks:\n      - clarusnet\n\n  myapp:\n    image: bookstore-api:latest\n    container_name: myapp\n    restart: always\n    depends_on: \n      - database\n    ports:\n      - \"80:80\"\n    networks:\n      - clarusnet\n  \nnetworks:\n  clarusnet: \n",
            "file": "docker-compose.yml",
            "id": "bookstore-repo/docker-compose.yml",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "c95f06f1a1bd7bd124613b1e785082688075d4ac"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        },
        {
          "index_key": "requirements.txt",
          "schema_version": 0,
          "attributes": {
            "branch": "main",
            "commit_author": "cmakkaya",
            "commit_email": "110052470+cmakkaya@users.noreply.github.com",
            "commit_message": "managed by terraform",
            "commit_sha": "77942755d45ecf80fcf8a65f1d3ef8d417a95f36",
            "content": "flask\r\nflask-mysql",
            "file": "requirements.txt",
            "id": "bookstore-repo/requirements.txt",
            "overwrite_on_create": true,
            "repository": "bookstore-repo",
            "sha": "8cbc9ebb5e8b1feb1243e4fbee65bc8887296888"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "github_repository.myrepo"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
